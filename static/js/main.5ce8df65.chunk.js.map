{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","require","App","props","state","text","handleChange","bind","this","setState","e","target","value","className","id","onChange","dangerouslySetInnerHTML","__html","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTAEIA,G,MAASC,EAAQ,KAkGNC,E,YA/Fb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,IAER,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,iFAwDjBC,KAAKC,SAAS,CACZJ,KAhDa,kwC,mCAoDJK,GACXF,KAAKC,SAAS,CACZJ,KAAMK,EAAEC,OAAOC,U,+BAKjB,OACE,yBAAKC,UAAU,iBACb,wBAAIA,UAAU,eAAd,sBACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,sBACb,wBAAIA,UAAU,eAAd,YACA,8BACEC,GAAG,SACHF,MAAOJ,KAAKJ,MAAMC,KAClBU,SAAUP,KAAKF,aACfO,UAAU,cAGd,yBAAKA,UAAU,sBACb,wBAAIA,UAAU,eAAd,aACA,yBACEA,UAAU,mBACVC,GAAG,UACHE,wBAAyB,CAAEC,OAAQjB,EAAOQ,KAAKJ,MAAMC,gB,GAvFjDa,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5ce8df65.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nlet marked = require(\"marked\");\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      text: \"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n  const placeholder = `# Welcome to my React Markdown Previewer!\r\n  \r\n  ## This is a sub-heading...\r\n  ### And here's some other cool stuff:\r\n    \r\n  Heres some code, \\`<div></div>\\`, between 2 backticks.\r\n  \r\n  \\`\\`\\`\r\n  // this is multi-line code:\r\n  \r\n  function anotherExample(firstLine, lastLine) {\r\n    if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n      return multiLineCode;\r\n    }\r\n  }\r\n  \\`\\`\\`\r\n    \r\n  You can also make text **bold**... whoa!\r\n  Or _italic_.\r\n  Or... wait for it... **_both!_**\r\n  And feel free to go crazy ~~crossing stuff out~~.\r\n  \r\n  There's also [links](https://www.freecodecamp.com), and\r\n  > Block Quotes!\r\n  \r\n  And if you want to get really crazy, even tables:\r\n  \r\n  Wild Header | Crazy Header | Another Header?\r\n  ------------ | ------------- | ------------- \r\n  Your content can | be here, and it | can be here....\r\n  And here. | Okay. | I think we get it.\r\n  \r\n  - And of course there are lists.\r\n    - Some are bulleted.\r\n        - With different indentation levels.\r\n          - That look like this.\r\n  \r\n  \r\n  1. And there are numbererd lists too.\r\n  1. Use just 1s if you want! \r\n  1. But the list goes on...\r\n  - Even if you use dashes or asterisks.\r\n  * And last but not least, let's not forget embedded images:\r\n  \r\n  ![React](https://goo.gl/Umyytc)\r\n\r\n  `;\r\n    this.setState({\r\n      text: placeholder\r\n    });\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({\r\n      text: e.target.value\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container App\">\r\n        <h3 className=\"text-center\">MARKDOWN PREVIEWER</h3>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-12 col-lg-6\">\r\n            <h3 className=\"text-center\">Markdown</h3>\r\n            <textarea\r\n              id=\"editor\"\r\n              value={this.state.text}\r\n              onChange={this.handleChange}\r\n              className=\"mt-2 p-5\"\r\n            />\r\n          </div>\r\n          <div className=\"col-sm-12 col-lg-6\">\r\n            <h3 className=\"text-center\">Previewer</h3>\r\n            <div\r\n              className=\"preview mt-3 p-5\"\r\n              id=\"preview\"\r\n              dangerouslySetInnerHTML={{ __html: marked(this.state.text) }}\r\n            ></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}